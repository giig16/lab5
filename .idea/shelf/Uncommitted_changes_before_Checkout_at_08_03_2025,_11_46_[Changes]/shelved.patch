Index: src/main/java/managers/CollectionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package managers;\n\nimport model.*;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\nimport java.util.*;\n\n\n/**\n * Класс, управляющий коллекцией объектов {@link City}.\n * <p>\n * Хранит {@code LinkedHashSet<City>} и обеспечивает операции добавления,\n * удаления и поиска городов. Также ведёт учёт времени инициализации.\n */\npublic class CollectionManager {\n    /**\n     * Основная коллекция, содержащая объекты {@link City}.\n     */\n    private LinkedHashSet<City> cities = new LinkedHashSet<>();\n    /**Менеджер csv*/\n    private  CSVManager csvManager;\n    /**Время инициализации коллекции*/\n    private final ZonedDateTime initTime;\n    /**Конструктор*/\n    public CollectionManager(CSVManager csvManager){\n        this.csvManager = csvManager;\n        initTime = ZonedDateTime.now();\n    }\n    /**Геттер для времени инициализации*/\n    public ZonedDateTime getInitTime(){\n        return initTime;\n    }\n    /**\n     * Добавляет объект {@link City} в коллекцию и сразу сохраняет изменения в CSV.\n     *\n     * @param city объект {@link City} для добавления\n     * @return {@code true}, если город был успешно добавлен\n     */\n    public  boolean addToSet (City city){\n        cities.add(city);\n        csvManager.writeInCollection(cities);\n        return true;\n    }\n    /**Геттер для коллекции*/\n    public LinkedHashSet<City> getCities(){\n        return cities;\n    }\n\n    /**Метод, печатающий коллекцию*/\n    public void printCities(){\n        for(City c: cities){\n            System.out.println(c.toString());\n        }\n    }\n\n    /**Сеттер для коллекции*/\n    public void setCities(LinkedHashSet<City> cities) {\n        this.cities = cities;\n    }\n\n    /**Возвращает размер коллекции*/\n    public int isEmpty() {\n        return cities.size();\n    }\n    /**Очищает коллекцию*/\n    public void clearCollection(){\n        cities.clear();\n    }\n\n\n\n    /**Очищает все элементы коллекции, которые круче чем переданный в параметры*/\n    public void clearCollectionGreater(String refCity){\n        City city = findCityByName(refCity);\n\n\n        if (city == null) {\n            System.out.println(\"Ошибка: Город с названием '\" + refCity + \"' не найден.\");\n            return;\n        }\n\n        Iterator<City> iterator = cities.iterator();\n        boolean exist = false;\n\n        List<String> delitedCities = new ArrayList<>();\n\n        while (iterator.hasNext()){\n            City nextCity= iterator.next();\n            if (nextCity.compareTo(city)>0){\n                iterator.remove();\n                delitedCities.add(nextCity.getName());\n                exist = true;\n                System.out.println(\"Удалены все города превышающие \" + city.getName());\n            }\n        }\n        if (!exist){\n            System.out.println(\"Нет городов превышающих \" + city.getName());\n        }else{\n            System.out.println(\"(Вот эти  – \" + String.join(\", \", delitedCities)+\")\");\n        }\n\n\n\n    }\n    /**Влзвращает city по имени*/\n    private City findCityByName(String name) {\n        for (City city : cities) {\n            if (city.getName().equalsIgnoreCase(name)) {\n                return city;\n            }\n        }\n        return null;\n    }\n    /**Возвращает city по id*/\n    private City findCityById(int id) {\n        for (City city : cities) {\n            if (city.getId().equals(id)) {\n                return city;\n            }\n        }\n        return null;\n    }\n\n\n\n    /**Очищает все элементы коллекции, которые [e;t чем переданный в параметры*/\n    public void clearCollectionLower(String refCity){\n        City city = findCityByName(refCity);\n\n\n        if (city == null) {\n            System.out.println(\"Ошибка: Город с названием '\" + refCity + \"' не найден.\");\n            return;\n        }\n\n        Iterator<City> iterator = cities.iterator();\n        boolean exist = false;\n\n        List<String> delitedCities = new ArrayList<>();\n\n        while (iterator.hasNext()){\n            City nextCity= iterator.next();\n            if (nextCity.compareTo(city)<0){\n                iterator.remove();\n                delitedCities.add(nextCity.getName());\n                exist = true;\n                System.out.println(\"Удалены все города меньшие чем \" + city.getName());\n            }\n        }\n        if (!exist){\n            System.out.println(\"Нет городов меньше чем \" + city.getName());\n        }else{\n            System.out.println(\"(Вот эти  – \" + String.join(\", \", delitedCities)+\")\");\n        }\n    }\n    /**Удаляет из коллекции объект по id*/\n    public void clearById(String deletedCity){\n        if (deletedCity == null){\n            System.out.println(\"Ошибка: введите название города\");\n        }else{\n        int intDeletedCity = Integer.parseInt(deletedCity);\n        City city =findCityById(intDeletedCity);\n\n            if (city == null) {\n                System.out.println(\"Ошибка: Город с id '\" + deletedCity + \"' не найден.\");\n                return;\n            }\n        cities.remove(city);\n        System.out.println(\"Удален город - \"+deletedCity);}\n\n\n    }\n    /**Метод для удаления объекта для его обновления*/\n    public void clearForUpdateById(String deletedCity){\n        if (deletedCity == null){\n            System.out.println(\"Ошибка: введите название города\");\n        }else{\n            int intDeletedCity = Integer.parseInt(deletedCity);\n            City city =findCityById(intDeletedCity);\n\n            if (city == null) {\n                System.out.println(\"Ошибка: Город с id '\" + deletedCity + \"' не найден.\");\n                return;\n            }\n            cities.remove(city);\n            System.out.println(\"Можете обновить город '\"+deletedCity+\"'\");}\n\n\n    }\n\n\n    /**Метод сравнения*/\n    public boolean toCompare(City refCity){\n        boolean smallerExist = false;\n        for (City city:cities){\n            if(refCity.compareTo(city)<0){\n                smallerExist=true;\n            }\n        }\n        return smallerExist;\n    }\n\n    /**Группировка объектов по площади*/\n    public void groupCitiesByArea() {\n        Map<Double, Integer> groupsByArea = new HashMap<>();\n\n\n        for (City city : cities) {\n            double area = city.getArea();\n            groupsByArea.put(area, groupsByArea.getOrDefault(area, 0) + 1);\n        }\n\n        for (Map.Entry<Double, Integer> group : groupsByArea.entrySet()) {\n            System.out.println(\"Площадь: \" + group.getKey() + \"\\nКоличество городов – \" + group.getValue());\n        }\n    }\n\n    /**Геттер для уникальной абсолютной высоты*/\n    public void getUniqueMetersAboveSeaLevel(){\n\n        /*Set<Long> uniqueMeters = new HashSet<>();\n\n        for (City city : cities) {\n            uniqueMeters.add(city.getMetersAboveSeaLevel()); // Добавляем высоту в Set\n        }\n\n        System.out.println(\"Уникальные значения metersAboveSeaLevel:\");\n        for (Long height : uniqueMeters) {\n            System.out.println(height);\n        }*/\n\n\n        cities.stream()\n                .map(City::getMetersAboveSeaLevel)\n                .distinct()\n                .forEach(System.out::println);\n\n    }\n    /**Возвращает среднее значение абсолютной высоты*/\n    public void getAverageMetersSeaLvl(){\n        double average =cities.stream()\n                .mapToLong(City::getMetersAboveSeaLevel)\n                .average()\n                .orElse(0);\n        System.out.println(average);\n\n    }\n\n    /**Метод создания города*/\n    public City createCity() {\n        Scanner scanner = new Scanner(System.in);\n        // name\n        System.out.println(\"Введите название города...\");\n        String name = scanner.nextLine().trim();\n        while (name.isEmpty()) {\n            System.out.println(\"Название не может быть пустым.\\nВведите название города...\");\n            name = scanner.nextLine().trim();\n        }\n\n        // coordinates\n        System.out.println(\"Введите координату x (число):\");\n        long x;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: x не может быть пустым. Повторите ввод:\");\n                continue;\n            }\n            try {\n                x = Long.parseLong(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: x должна быть числом. Повторите ввод:\");\n            }\n        }\n\n        System.out.println(\"Введите координату y (число):\");\n        double y;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: y не может быть пустым. Повторите ввод:\");\n                continue;\n            }\n            try {\n                y = Double.parseDouble(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: y должна быть числом. Повторите ввод:\");\n            }\n        }\n        Coordinates coordinates = new Coordinates(x, y);\n\n        //creationDate\n        ZonedDateTime creationDate = ZonedDateTime.now();\n\n        // area\n        System.out.println(\"Введите площадь города (число):\");\n        Double area = null;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: Площадь не может быть пустой. Повторите ввод:\");\n                continue;\n            }\n            try {\n                area = Double.parseDouble(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: Площадь должна быть числом. Повторите ввод:\");\n            }\n        }\n\n        // population\n        System.out.println(\"Введите численность населения (число):\");\n        long population;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: Численность населения не может быть пустой. Повторите ввод:\");\n                continue;\n            }\n            try {\n                population = Long.parseLong(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: Введите корректное целое число.\");\n            }\n        }\n\n        // metersAboveSeaLevel\n        System.out.println(\"Введите абсолютную высоту города (число):\");\n        long metersAboveSeaLevel;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: Значение не может быть пустым. Повторите ввод:\");\n                continue;\n            }\n            try {\n                metersAboveSeaLevel = Long.parseLong(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: Введите корректное число.\");\n            }\n        }\n\n        // establishmentDate\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\n        ZonedDateTime establishmentDate = null;\n        System.out.println(\"Введите дату основания города в формате yyyy-MM-dd HH:mm или оставьте пустым:\");\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                break;\n            }\n            try {\n                LocalDateTime lDT = LocalDateTime.parse(input, formatter);\n                establishmentDate = lDT.atZone(ZoneId.systemDefault());\n                break;\n            } catch (DateTimeParseException e) {\n                System.out.println(\"Ошибка: формат ввода неверен. Формат: yyyy-MM-dd HH:mm или пустая строка.\");\n            }\n        }\n\n        // Government\n        Government government = null;\n        while (government == null) {\n            System.out.println(\"Введите форму правления (ARISTOCRACY, STRATOCRACY, TELLUROCRACY): \");\n            String input = scanner.nextLine().trim().toUpperCase();\n            try {\n                government = Government.valueOf(input);\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Ошибка: нет такого варианта. Повторите ввод.\\n\");\n            }\n        }\n\n        // StandardOfLiving\n        StandardOfLiving standardOfLiving = null;\n        while (standardOfLiving == null) {\n            System.out.println(\"Введите уровень жизни (VERY_HIGH, HIGH, NIGHTMARE):\");\n            String input = scanner.nextLine().trim().toUpperCase();\n            try {\n                standardOfLiving = StandardOfLiving.valueOf(input);\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Ошибка: нет такого варианта. Повторите ввод.\\n\");\n            }\n        }\n\n\n        // Governor\n        System.out.println(\"Введите возраст губернатора (число):\");\n        Long age = null;\n        while (true) {\n            String input = scanner.nextLine().trim();\n            if (input.isEmpty()) {\n                System.out.println(\"Ошибка: возраст не может быть пустым. Повторите ввод:\");\n                continue;\n            }\n            try {\n                age = Long.parseLong(input);\n                break;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Ошибка: введите корректное число.\");\n\n            }\n        }\n        Human governor = new Human(age);\n\n        //  City\n        City city = new City(\n                name,\n                coordinates,\n                creationDate,\n                area,\n                population,\n                metersAboveSeaLevel,\n                establishmentDate,\n                government,\n                standardOfLiving,\n                governor\n        );\n\n\n        return city;\n    }\n\n\n\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/managers/CollectionManager.java b/src/main/java/managers/CollectionManager.java
--- a/src/main/java/managers/CollectionManager.java	(revision e1ac1b4e05e1975a85ac28a48fcf51b794b97d8a)
+++ b/src/main/java/managers/CollectionManager.java	(date 1741423572919)
@@ -431,6 +431,9 @@
 
 
 
+
+
+
 }
 
 
